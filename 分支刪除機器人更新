跳至主要內容
GitHub 文檔
存儲庫/分支與合併/管理受保護的分支/關於受保護的分支
關於受保護的分支
在本文中
關於分支保護規則
關於分支保護設置
您可以通過設置分支保護規則來保護重要分支，這些規則定義協作者是否可以刪除或強制推送到分支，並設置任何推送到分支的要求，例如傳遞狀態檢查或線性提交歷史記錄。

受保護的分支可在具有 GitHub Free 和 GitHub Free for Organizations 的公共存儲庫中使用，也可在具有 GitHub Pro、GitHub Team、GitHub Enterprise Cloud 和 GitHub Enterprise Server 的公共和私有存儲庫中使用。有關更多信息，請參閱“ GitHub 的計劃”。

關於分支保護規則
You can enforce certain workflows or requirements before a collaborator can push changes to a branch in your repository, including merging a pull request into the branch, by creating a branch protection rule. Actors may only be added to bypass lists when the repository belongs to an organization.

By default, each branch protection rule disables force pushes to the matching branches and prevents the matching branches from being deleted. You can optionally disable these restrictions and enable additional branch protection settings.

By default, the restrictions of a branch protection rule don't apply to people with admin permissions to the repository or custom roles with the "bypass branch protections" permission. You can optionally apply the restrictions to administrators and roles with the "bypass branch protections" permission, too. For more information, see "Managing custom repository roles for an organization".

You can create a branch protection rule in a repository for a specific branch, all branches, or any branch that matches a name pattern you specify with fnmatch syntax. For example, to protect any branches containing the word release, you can create a branch rule for *release*. For more information about branch name patterns, see "Managing a branch protection rule."

You can configure a pull request to merge automatically when all merge requirements are met. For more information, see "Automatically merging a pull request."

Note: Only a single branch protection rule can apply at a time, which means it can be difficult to know which rule will apply when multiple versions of a rule target the same branch. For information about an alternative to branch protection rules, see "About rulesets."

About branch protection settings
For each branch protection rule, you can choose to enable or disable the following settings.

Require pull request reviews before merging

Require status checks before merging

Require conversation resolution before merging

Require signed commits

Require linear history

Require merge queue

Require deployments to succeed before merging

Lock branch

Do not allow bypassing the above settings

Restrict who can push to matching branches

Allow force pushes

Allow deletions

For more information on how to set up branch protection, see "Managing a branch protection rule."

Require pull request reviews before merging
Repository administrators or custom roles with the "edit repository rules" permission can require that all pull requests receive a specific number of approving reviews before someone merges the pull request into a protected branch. You can require approving reviews from people with write permissions in the repository or from a designated code owner.

If you enable required reviews, collaborators can only push changes to a protected branch via a pull request that is approved by the required number of reviewers with write permissions.

If a person with admin permissions chooses the Request changes option in a review, then that person must approve the pull request before the pull request can be merged. If a reviewer who requests changes on a pull request isn't available, anyone with write permissions for the repository can dismiss the blocking review.

Even after all required reviewers have approved a pull request, collaborators cannot merge the pull request if there are other open pull requests that have a head branch pointing to the same commit with pending or rejected reviews. Someone with write permissions must approve or dismiss the blocking review on the other pull requests first.

If a collaborator attempts to merge a pull request with pending or rejected reviews into the protected branch, the collaborator will receive an error message.

remote: error: GH006: Protected branch update failed for refs/heads/main.
remote: error: Changes have been requested.
Optionally, you can choose to dismiss stale pull request approvals when commits are pushed that affect the diff in the pull request. GitHub records the state of the diff at the point when a pull request is approved. This state represents the set of changes that the reviewer approved. If the diff changes from this state (for example, because a contributor pushes new changes to the pull request branch or clicks Update branch, or because a related pull request is merged into the target branch), the approving review is dismissed as stale, and the pull request cannot be merged until someone approves the work again. For information about the base branch, see "About pull requests."

Optionally, you can restrict the ability to dismiss pull request reviews to specific people or teams. For more information, see "Dismissing a pull request review."

Optionally, you can choose to require reviews from code owners. If you do, any pull request that affects code with a code owner must be approved by that code owner before the pull request can be merged into the protected branch.

Optionally, you can require that the most recent reviewable push must be approved by someone other than the person who pushed it. This means at least one other authorized reviewer has approved any changes. For example, the "last reviewer" can check that the latest set of changes incorporates feedback from other reviews, and does not add new, unreviewed content.

For complex pull requests that require many reviews, requiring an approval from someone other than the last person to push can be a compromise that avoids the need to dismiss all stale reviews: with this option, "stale" reviews are not dismissed, and the pull request remains approved as long as someone other than the person who made the most recent changes approves it. Users who have already reviewed a pull request can reapprove after the most recent push to meet this requirement. If you are concerned about pull requests being "hijacked" (where unapproved content is added to approved pull requests), it is safer to dismiss stale reviews.

注意：如果您選擇在推送新提交時忽略過時的拉取請求批准和/或需要批准最近的可審查推送，則手動為拉取請求創建合併提交並將其直接推送到受保護的分支將失敗，除非內容合併的內容與 GitHub 為拉取請求生成的合併完全匹配。

此外，通過這些設置，如果合併庫在提交審核後引入新的更改，則批准的審核將被視為過時而被駁回。合併基礎是主題分支和基礎分支之間最後一個共同祖先的提交。如果合併基礎發生變化，則在有人再次批准該工作之前，無法合併拉取請求。

合併前需要進行狀態檢查
所需的狀態檢查可確保協作者可以對受保護的分支進行更改之前所有必需的 CI 測試都已通過。所需的狀態檢查可以是檢查或狀態。有關詳細信息，請參閱“關於狀態檢查”。

您可以使用提交狀態 API 來允許外部服務將提交標記為適當的狀態。有關更多信息，請參閱REST API 文檔中的“提交狀態”。

啟用所需的狀態檢查後，所有必需的狀態檢查必​​須通過，協作者才能將更改合併到受保護的分支中。通過所有必需的狀態檢查後，任何提交都必須推送到另一個分支，然後合併或直接推送到受保護的分支。

具有存儲庫寫入權限的任何人或集成都可以設置存儲庫中任何狀態檢查的狀態，但在某些情況下，您可能只想接受來自特定 GitHub 應用程序的狀態檢查。添加所需的狀態檢查時，您可以選擇最近將此檢查設置為預期狀態更新源的應用程序。如果狀態由任何其他人或集成設置，則不允許合併。如果您選擇“任何來源”，您仍然可以手動驗證合併框中列出的每個狀態的作者。

您可以將所需的狀態檢查設置為“寬鬆”或“嚴格”。您選擇的所需狀態檢查類型決定了您的分支是否需要在合併之前與基礎分支保持同步。

所需狀態檢查的類型	環境	合併需求	注意事項
嚴格的	選中合併之前要求分支保持最新狀態複選框。	在合併之前，分支必須與基礎分支保持同步。	這是所需狀態檢查的默認行為。可能需要更多構建，因為在其他協作者更新目標分支後，您需要使頭分支保持最新狀態。
鬆動的	未選中“合併前要求分支保持最新”複選框。	在合併之前，分支不必與基礎分支保持同步。	您所需的構建將會減少，因為在其他協作者合併拉取請求後，您不需要使頭部分支保持最新狀態。如果存在與基礎分支不兼容的更改，則合併分支後狀態檢查可能會失敗。
殘疾人	未選中合併前要求狀態檢查通過複選框。	分支沒有合併限制。	如果未啟用所需的狀態檢查，協作者可以隨時合併分支，無論它是否與基礎分支是最新的。這增加了不兼容更改的可能性。
有關故障排除信息，請參閱“所需狀態檢查故障排除”。

合併前需要對話解決
Requires all comments on the pull request to be resolved before it can be merged to a protected branch. This ensures that all comments are addressed or acknowledged before merge.

Require signed commits
When you enable required commit signing on a branch, contributors and bots can only push commits that have been signed and verified to the branch. For more information, see "About commit signature verification."

Notes:

If you have enabled vigilant mode, which indicates that your commits will always be signed, any commits that GitHub identifies as "Partially verified" are permitted on branches that require signed commits. For more information about vigilant mode, see "Displaying verification statuses for all of your commits."
If a collaborator pushes an unsigned commit to a branch that requires commit signatures, the collaborator will need to rebase the commit to include a verified signature, then force push the rewritten commit to the branch.
You can always push local commits to the branch if the commits are signed and verified. You can also merge signed and verified commits into the branch using a pull request on GitHub. However, you cannot squash and merge a pull request into the branch on GitHub unless you are the author of the pull request. You can squash and merge pull requests locally. For more information, see "Checking out pull requests locally."

For more information about merge methods, see "About merge methods on GitHub."

Require linear history
Enforcing a linear commit history prevents collaborators from pushing merge commits to the branch. This means that any pull requests merged into the protected branch must use a squash merge or a rebase merge. A strictly linear commit history can help teams reverse changes more easily. For more information about merge methods, see "About pull request merges."

Before you can require a linear commit history, your repository must allow squash merging or rebase merging. For more information, see "Configuring pull request merges."

Require merge queue
A merge queue helps increase velocity by automating pull request merges into a busy branch and ensuring the branch is never broken by incompatible changes.

The merge queue provides the same benefits as the Require branches to be up to date before merging branch protection, but does not require a pull request author to update their pull request branch and wait for status checks to finish before trying to merge.

Using a merge queue is particularly useful on branches that have a relatively high number of pull requests merging each day from many different users.

Once a pull request has passed all required branch protection checks, a user with write access to the repository can add the pull request to the queue. The merge queue will ensure the pull request's changes pass all required status checks when applied to the latest version of the target branch and any pull requests already in the queue.

A merge queue may use GitHub Actions or your own CI provider to run required checks on pull requests in a merge queue. For more information, see "GitHub Actions documentation."

GitHub merges the pull request according to the merge strategy configured in the branch protection once all required CI checks pass.

For more information about merge queues, see "Managing a merge queue."

Require deployments to succeed before merging
You can require that changes are successfully deployed to specific environments before a branch can be merged. For example, you can use this rule to ensure that changes are successfully deployed to a staging environment before the changes merge to your default branch.

Lock branch
Locking a branch ensures that no commits can be made to the branch. By default, a forked repository does not support syncing from its upstream repository. You can enable Allow fork syncing to pull changes from the upstream repository while preventing other contributions to the fork's branch.

Do not allow bypassing the above settings
By default, the restrictions of a branch protection rule do not apply to people with admin permissions to the repository or custom roles with the "bypass branch protections" permission in a repository.

You can enable this setting to apply the restrictions to admins and roles with the "bypass branch protections" permission, too. For more information, see "Managing custom repository roles for an organization".

Restrict who can push to matching branches
You can enable branch restrictions in public repositories owned by a GitHub Free organization and in all repositories owned by an organization using GitHub Team or GitHub Enterprise Cloud.

When you enable branch restrictions, only users, teams, or apps that have been given permission can push to the protected branch. You can view and edit the users, teams, or apps with push access to a protected branch in the protected branch's settings. When status checks are required, the people, teams, and apps that have permission to push to a protected branch will still be prevented from merging into the branch when the required checks fail. People, teams, and apps that have permission to push to a protected branch will still need to create a pull request when pull requests are required.

Optionally, you can apply the same restrictions to the creation of branches that match the rule. For example, if you create a rule that only allows a certain team to push to any branches that contain the word release, only members of that team would be able to create a new branch that contains the word release.

You can only give push access to a protected branch, or give permission to create a matching branch, to users, teams, or installed GitHub Apps with write access to a repository. People and apps with admin permissions to a repository are always able to push to a protected branch or create a matching branch.

Allow force pushes
By default, GitHub blocks force pushes on all protected branches. When you enable force pushes to a protected branch, you can choose one of two groups who can force push:

Allow everyone with at least write permissions to the repository to force push to the branch, including those with admin permissions.
Allow only specific people or teams to force push to the branch.
If someone force pushes to a branch, the force push may mean commits that other collaborators based their work on are removed from the history of the branch. People may have merge conflicts or corrupted pull requests. Force pushing can also be used to delete branches or point a branch to commits that were not approved in a pull request.

Enabling force pushes will not override any other branch protection rules. For example, if a branch requires a linear commit history, you cannot force push merge commits to that branch.

Allow deletions
默認情況下，您無法刪除受保護的分支。當您啟用受保護分支的刪除功能時，至少對存儲庫具有寫入權限的任何人都可以刪除該分支。

幫助和支持
這位醫生對您有幫助嗎？

隱私政策
幫助我們使這些文檔變得更加出色！
所有 GitHub 文檔都是開源的。看到什麼錯誤或不清楚的地方嗎？提交拉取請求。

了解如何做出貢獻

還需要幫助嗎？
詢問 GitHub 社區
聯繫支持人員
合法的
© 2023 GitHub, Inc.
條款
隱私
地位
價錢
專家服務
博客

2023/9/10日更新刪除分支保護帳號被黑客
盜用導致全部帳號都被他亂串改麻煩幫我恢復手機裝置謝謝
